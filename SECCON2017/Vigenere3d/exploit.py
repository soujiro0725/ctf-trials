# exploit for Vigenere3d
# coding: utf-8

"""
s = "ABCDEFghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz"

def _l(idx, s) -> idxより前を最後につける

print main(flag, seed, seed_reversed)
flagから順番に、

encrypted = t[flagの文字の位置][seedの文字の位置][seed_reversedの文字の位置]


1. Vigenere3d を作る

2. seedをつくる

3. encrypted から残りのflagを組み立てる
"""
import sys

plain = "SECCON{"
encrypted = "POR4dnyTLHBfwbxAAZhe}}ocZR3Cxcftw9"
seed = "" # 14 characters
seed_reversed = ""

def _l(idx, s):
    return s[idx:] + s[:idx]

s = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_{}"
t = [[_l((i+j) % len(s), s) for j in range(len(s))] for i in range(len(s))]

# find seed

def find_c(a,c1,c2):
    return t[s.find(a)][s.find(c1)][s.find(c2)]

for i in range(len(plain)):
    try:
        # only first 7 characters are needed
        for j in range(len(s)): # seed upper 7 characters loop
            for k in range(len(s)): # seed lower 7 characters loop
                c = find_c(plain[i], s[j], s[k])
                if c == encrypted[i]:
                    seed += s[j]
                    seed_reversed += s[k]
                    raise
    except Exception:
        pass
print("seed is {}, seed reversed is {}".format(seed, seed_reversed))

discovered_seed = "_KP2Za__aZ2PK_"

