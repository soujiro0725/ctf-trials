import sys
import r2pipe

r2 = r2pipe.open("./zwiebel2")
r2.cmd("e dbg.profile=zwiebel2.rr2")
r2.cmd("doo")
r2.cmd("db 0x400875")
r2.cmd("dc")

def step():
  r2.cmd("ds")
  r2.cmd("sr rip")

flag = [0x20] * 50  # 6:05

while True:
  # 000000000060132b         mov        al, byte [rax]
  # 000000000060132e         and        al, 0x40
  # 0000000000601330         je         shc+56
  disass = []
  while True:
    step()
    current_instruction = r2.cmdj("pdj 1")[0]
    # print current_instruction['opcode']
    disass.append(current_instruction['opcode'])
    if current_instruction['type'] == 'cjmp':  # this meeans reach the end  4:50
      break
  offset = disass[-3].split("rax")[1][:-1]
  if not offset:
    offset = "0"
  offset = int(offset, 16)
  and_value = int(disass[-2].split(", ")[1], 16)
  if "je" in disass[-1]:
    flag[offset] = flag[offset] | and_value
    r2.cmd("dr zf=0")
  elif "jne" in disass[-1]:
    flag[offset] = flag[offset] & (0xFF ^ and_value)
    r2.cmd("dr zf=1")
  # print current flag
  out = ""
  for c in flag:
    if c >= 0x20 and c <= 0x7E:
      out += chr(c)
    else:
      out += " "
  sys.stdout.write("\r" + out)
  sys.stdout.flush()

  step() # 6:50

  # continue until the loop instruction
  while True:
    step()
    if "loop" in r2.cmdj("pdj 1")[0]['opcode']:
      break
  target = hex(r2.cmdj("pdj 2")[1]['jump'])
  r2.cmd("db " + target)
  r2.cmd("dc")

